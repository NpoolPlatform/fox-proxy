// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/fox-proxy/pkg/db/ent/predicate"
	"github.com/NpoolPlatform/fox-proxy/pkg/db/ent/regcoininfo"
	"github.com/google/uuid"
)

// RegCoinInfoUpdate is the builder for updating RegCoinInfo entities.
type RegCoinInfoUpdate struct {
	config
	hooks     []Hook
	mutation  *RegCoinInfoMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RegCoinInfoUpdate builder.
func (rciu *RegCoinInfoUpdate) Where(ps ...predicate.RegCoinInfo) *RegCoinInfoUpdate {
	rciu.mutation.Where(ps...)
	return rciu
}

// SetEntID sets the "ent_id" field.
func (rciu *RegCoinInfoUpdate) SetEntID(u uuid.UUID) *RegCoinInfoUpdate {
	rciu.mutation.SetEntID(u)
	return rciu
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (rciu *RegCoinInfoUpdate) SetNillableEntID(u *uuid.UUID) *RegCoinInfoUpdate {
	if u != nil {
		rciu.SetEntID(*u)
	}
	return rciu
}

// SetChainType sets the "chain_type" field.
func (rciu *RegCoinInfoUpdate) SetChainType(i int32) *RegCoinInfoUpdate {
	rciu.mutation.ResetChainType()
	rciu.mutation.SetChainType(i)
	return rciu
}

// SetNillableChainType sets the "chain_type" field if the given value is not nil.
func (rciu *RegCoinInfoUpdate) SetNillableChainType(i *int32) *RegCoinInfoUpdate {
	if i != nil {
		rciu.SetChainType(*i)
	}
	return rciu
}

// AddChainType adds i to the "chain_type" field.
func (rciu *RegCoinInfoUpdate) AddChainType(i int32) *RegCoinInfoUpdate {
	rciu.mutation.AddChainType(i)
	return rciu
}

// ClearChainType clears the value of the "chain_type" field.
func (rciu *RegCoinInfoUpdate) ClearChainType() *RegCoinInfoUpdate {
	rciu.mutation.ClearChainType()
	return rciu
}

// SetCoinType sets the "coin_type" field.
func (rciu *RegCoinInfoUpdate) SetCoinType(i int32) *RegCoinInfoUpdate {
	rciu.mutation.ResetCoinType()
	rciu.mutation.SetCoinType(i)
	return rciu
}

// SetNillableCoinType sets the "coin_type" field if the given value is not nil.
func (rciu *RegCoinInfoUpdate) SetNillableCoinType(i *int32) *RegCoinInfoUpdate {
	if i != nil {
		rciu.SetCoinType(*i)
	}
	return rciu
}

// AddCoinType adds i to the "coin_type" field.
func (rciu *RegCoinInfoUpdate) AddCoinType(i int32) *RegCoinInfoUpdate {
	rciu.mutation.AddCoinType(i)
	return rciu
}

// ClearCoinType clears the value of the "coin_type" field.
func (rciu *RegCoinInfoUpdate) ClearCoinType() *RegCoinInfoUpdate {
	rciu.mutation.ClearCoinType()
	return rciu
}

// SetTempName sets the "temp_name" field.
func (rciu *RegCoinInfoUpdate) SetTempName(s string) *RegCoinInfoUpdate {
	rciu.mutation.SetTempName(s)
	return rciu
}

// SetNillableTempName sets the "temp_name" field if the given value is not nil.
func (rciu *RegCoinInfoUpdate) SetNillableTempName(s *string) *RegCoinInfoUpdate {
	if s != nil {
		rciu.SetTempName(*s)
	}
	return rciu
}

// ClearTempName clears the value of the "temp_name" field.
func (rciu *RegCoinInfoUpdate) ClearTempName() *RegCoinInfoUpdate {
	rciu.mutation.ClearTempName()
	return rciu
}

// SetName sets the "name" field.
func (rciu *RegCoinInfoUpdate) SetName(s string) *RegCoinInfoUpdate {
	rciu.mutation.SetName(s)
	return rciu
}

// SetEnv sets the "env" field.
func (rciu *RegCoinInfoUpdate) SetEnv(s string) *RegCoinInfoUpdate {
	rciu.mutation.SetEnv(s)
	return rciu
}

// SetNillableEnv sets the "env" field if the given value is not nil.
func (rciu *RegCoinInfoUpdate) SetNillableEnv(s *string) *RegCoinInfoUpdate {
	if s != nil {
		rciu.SetEnv(*s)
	}
	return rciu
}

// ClearEnv clears the value of the "env" field.
func (rciu *RegCoinInfoUpdate) ClearEnv() *RegCoinInfoUpdate {
	rciu.mutation.ClearEnv()
	return rciu
}

// SetCreatedAt sets the "created_at" field.
func (rciu *RegCoinInfoUpdate) SetCreatedAt(u uint32) *RegCoinInfoUpdate {
	rciu.mutation.ResetCreatedAt()
	rciu.mutation.SetCreatedAt(u)
	return rciu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rciu *RegCoinInfoUpdate) SetNillableCreatedAt(u *uint32) *RegCoinInfoUpdate {
	if u != nil {
		rciu.SetCreatedAt(*u)
	}
	return rciu
}

// AddCreatedAt adds u to the "created_at" field.
func (rciu *RegCoinInfoUpdate) AddCreatedAt(u int32) *RegCoinInfoUpdate {
	rciu.mutation.AddCreatedAt(u)
	return rciu
}

// ClearCreatedAt clears the value of the "created_at" field.
func (rciu *RegCoinInfoUpdate) ClearCreatedAt() *RegCoinInfoUpdate {
	rciu.mutation.ClearCreatedAt()
	return rciu
}

// SetUpdatedAt sets the "updated_at" field.
func (rciu *RegCoinInfoUpdate) SetUpdatedAt(u uint32) *RegCoinInfoUpdate {
	rciu.mutation.ResetUpdatedAt()
	rciu.mutation.SetUpdatedAt(u)
	return rciu
}

// AddUpdatedAt adds u to the "updated_at" field.
func (rciu *RegCoinInfoUpdate) AddUpdatedAt(u int32) *RegCoinInfoUpdate {
	rciu.mutation.AddUpdatedAt(u)
	return rciu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (rciu *RegCoinInfoUpdate) ClearUpdatedAt() *RegCoinInfoUpdate {
	rciu.mutation.ClearUpdatedAt()
	return rciu
}

// SetDeletedAt sets the "deleted_at" field.
func (rciu *RegCoinInfoUpdate) SetDeletedAt(u uint32) *RegCoinInfoUpdate {
	rciu.mutation.ResetDeletedAt()
	rciu.mutation.SetDeletedAt(u)
	return rciu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rciu *RegCoinInfoUpdate) SetNillableDeletedAt(u *uint32) *RegCoinInfoUpdate {
	if u != nil {
		rciu.SetDeletedAt(*u)
	}
	return rciu
}

// AddDeletedAt adds u to the "deleted_at" field.
func (rciu *RegCoinInfoUpdate) AddDeletedAt(u int32) *RegCoinInfoUpdate {
	rciu.mutation.AddDeletedAt(u)
	return rciu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (rciu *RegCoinInfoUpdate) ClearDeletedAt() *RegCoinInfoUpdate {
	rciu.mutation.ClearDeletedAt()
	return rciu
}

// Mutation returns the RegCoinInfoMutation object of the builder.
func (rciu *RegCoinInfoUpdate) Mutation() *RegCoinInfoMutation {
	return rciu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rciu *RegCoinInfoUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	rciu.defaults()
	if len(rciu.hooks) == 0 {
		affected, err = rciu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RegCoinInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rciu.mutation = mutation
			affected, err = rciu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(rciu.hooks) - 1; i >= 0; i-- {
			if rciu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rciu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rciu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (rciu *RegCoinInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := rciu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rciu *RegCoinInfoUpdate) Exec(ctx context.Context) error {
	_, err := rciu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rciu *RegCoinInfoUpdate) ExecX(ctx context.Context) {
	if err := rciu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rciu *RegCoinInfoUpdate) defaults() {
	if _, ok := rciu.mutation.UpdatedAt(); !ok && !rciu.mutation.UpdatedAtCleared() {
		v := regcoininfo.UpdateDefaultUpdatedAt()
		rciu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rciu *RegCoinInfoUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RegCoinInfoUpdate {
	rciu.modifiers = append(rciu.modifiers, modifiers...)
	return rciu
}

func (rciu *RegCoinInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   regcoininfo.Table,
			Columns: regcoininfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: regcoininfo.FieldID,
			},
		},
	}
	if ps := rciu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rciu.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: regcoininfo.FieldEntID,
		})
	}
	if value, ok := rciu.mutation.ChainType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: regcoininfo.FieldChainType,
		})
	}
	if value, ok := rciu.mutation.AddedChainType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: regcoininfo.FieldChainType,
		})
	}
	if rciu.mutation.ChainTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: regcoininfo.FieldChainType,
		})
	}
	if value, ok := rciu.mutation.CoinType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: regcoininfo.FieldCoinType,
		})
	}
	if value, ok := rciu.mutation.AddedCoinType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: regcoininfo.FieldCoinType,
		})
	}
	if rciu.mutation.CoinTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: regcoininfo.FieldCoinType,
		})
	}
	if value, ok := rciu.mutation.TempName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: regcoininfo.FieldTempName,
		})
	}
	if rciu.mutation.TempNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: regcoininfo.FieldTempName,
		})
	}
	if value, ok := rciu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: regcoininfo.FieldName,
		})
	}
	if value, ok := rciu.mutation.Env(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: regcoininfo.FieldEnv,
		})
	}
	if rciu.mutation.EnvCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: regcoininfo.FieldEnv,
		})
	}
	if value, ok := rciu.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: regcoininfo.FieldCreatedAt,
		})
	}
	if value, ok := rciu.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: regcoininfo.FieldCreatedAt,
		})
	}
	if rciu.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: regcoininfo.FieldCreatedAt,
		})
	}
	if value, ok := rciu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: regcoininfo.FieldUpdatedAt,
		})
	}
	if value, ok := rciu.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: regcoininfo.FieldUpdatedAt,
		})
	}
	if rciu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: regcoininfo.FieldUpdatedAt,
		})
	}
	if value, ok := rciu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: regcoininfo.FieldDeletedAt,
		})
	}
	if value, ok := rciu.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: regcoininfo.FieldDeletedAt,
		})
	}
	if rciu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: regcoininfo.FieldDeletedAt,
		})
	}
	_spec.Modifiers = rciu.modifiers
	if n, err = sqlgraph.UpdateNodes(ctx, rciu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{regcoininfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// RegCoinInfoUpdateOne is the builder for updating a single RegCoinInfo entity.
type RegCoinInfoUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RegCoinInfoMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetEntID sets the "ent_id" field.
func (rciuo *RegCoinInfoUpdateOne) SetEntID(u uuid.UUID) *RegCoinInfoUpdateOne {
	rciuo.mutation.SetEntID(u)
	return rciuo
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (rciuo *RegCoinInfoUpdateOne) SetNillableEntID(u *uuid.UUID) *RegCoinInfoUpdateOne {
	if u != nil {
		rciuo.SetEntID(*u)
	}
	return rciuo
}

// SetChainType sets the "chain_type" field.
func (rciuo *RegCoinInfoUpdateOne) SetChainType(i int32) *RegCoinInfoUpdateOne {
	rciuo.mutation.ResetChainType()
	rciuo.mutation.SetChainType(i)
	return rciuo
}

// SetNillableChainType sets the "chain_type" field if the given value is not nil.
func (rciuo *RegCoinInfoUpdateOne) SetNillableChainType(i *int32) *RegCoinInfoUpdateOne {
	if i != nil {
		rciuo.SetChainType(*i)
	}
	return rciuo
}

// AddChainType adds i to the "chain_type" field.
func (rciuo *RegCoinInfoUpdateOne) AddChainType(i int32) *RegCoinInfoUpdateOne {
	rciuo.mutation.AddChainType(i)
	return rciuo
}

// ClearChainType clears the value of the "chain_type" field.
func (rciuo *RegCoinInfoUpdateOne) ClearChainType() *RegCoinInfoUpdateOne {
	rciuo.mutation.ClearChainType()
	return rciuo
}

// SetCoinType sets the "coin_type" field.
func (rciuo *RegCoinInfoUpdateOne) SetCoinType(i int32) *RegCoinInfoUpdateOne {
	rciuo.mutation.ResetCoinType()
	rciuo.mutation.SetCoinType(i)
	return rciuo
}

// SetNillableCoinType sets the "coin_type" field if the given value is not nil.
func (rciuo *RegCoinInfoUpdateOne) SetNillableCoinType(i *int32) *RegCoinInfoUpdateOne {
	if i != nil {
		rciuo.SetCoinType(*i)
	}
	return rciuo
}

// AddCoinType adds i to the "coin_type" field.
func (rciuo *RegCoinInfoUpdateOne) AddCoinType(i int32) *RegCoinInfoUpdateOne {
	rciuo.mutation.AddCoinType(i)
	return rciuo
}

// ClearCoinType clears the value of the "coin_type" field.
func (rciuo *RegCoinInfoUpdateOne) ClearCoinType() *RegCoinInfoUpdateOne {
	rciuo.mutation.ClearCoinType()
	return rciuo
}

// SetTempName sets the "temp_name" field.
func (rciuo *RegCoinInfoUpdateOne) SetTempName(s string) *RegCoinInfoUpdateOne {
	rciuo.mutation.SetTempName(s)
	return rciuo
}

// SetNillableTempName sets the "temp_name" field if the given value is not nil.
func (rciuo *RegCoinInfoUpdateOne) SetNillableTempName(s *string) *RegCoinInfoUpdateOne {
	if s != nil {
		rciuo.SetTempName(*s)
	}
	return rciuo
}

// ClearTempName clears the value of the "temp_name" field.
func (rciuo *RegCoinInfoUpdateOne) ClearTempName() *RegCoinInfoUpdateOne {
	rciuo.mutation.ClearTempName()
	return rciuo
}

// SetName sets the "name" field.
func (rciuo *RegCoinInfoUpdateOne) SetName(s string) *RegCoinInfoUpdateOne {
	rciuo.mutation.SetName(s)
	return rciuo
}

// SetEnv sets the "env" field.
func (rciuo *RegCoinInfoUpdateOne) SetEnv(s string) *RegCoinInfoUpdateOne {
	rciuo.mutation.SetEnv(s)
	return rciuo
}

// SetNillableEnv sets the "env" field if the given value is not nil.
func (rciuo *RegCoinInfoUpdateOne) SetNillableEnv(s *string) *RegCoinInfoUpdateOne {
	if s != nil {
		rciuo.SetEnv(*s)
	}
	return rciuo
}

// ClearEnv clears the value of the "env" field.
func (rciuo *RegCoinInfoUpdateOne) ClearEnv() *RegCoinInfoUpdateOne {
	rciuo.mutation.ClearEnv()
	return rciuo
}

// SetCreatedAt sets the "created_at" field.
func (rciuo *RegCoinInfoUpdateOne) SetCreatedAt(u uint32) *RegCoinInfoUpdateOne {
	rciuo.mutation.ResetCreatedAt()
	rciuo.mutation.SetCreatedAt(u)
	return rciuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rciuo *RegCoinInfoUpdateOne) SetNillableCreatedAt(u *uint32) *RegCoinInfoUpdateOne {
	if u != nil {
		rciuo.SetCreatedAt(*u)
	}
	return rciuo
}

// AddCreatedAt adds u to the "created_at" field.
func (rciuo *RegCoinInfoUpdateOne) AddCreatedAt(u int32) *RegCoinInfoUpdateOne {
	rciuo.mutation.AddCreatedAt(u)
	return rciuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (rciuo *RegCoinInfoUpdateOne) ClearCreatedAt() *RegCoinInfoUpdateOne {
	rciuo.mutation.ClearCreatedAt()
	return rciuo
}

// SetUpdatedAt sets the "updated_at" field.
func (rciuo *RegCoinInfoUpdateOne) SetUpdatedAt(u uint32) *RegCoinInfoUpdateOne {
	rciuo.mutation.ResetUpdatedAt()
	rciuo.mutation.SetUpdatedAt(u)
	return rciuo
}

// AddUpdatedAt adds u to the "updated_at" field.
func (rciuo *RegCoinInfoUpdateOne) AddUpdatedAt(u int32) *RegCoinInfoUpdateOne {
	rciuo.mutation.AddUpdatedAt(u)
	return rciuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (rciuo *RegCoinInfoUpdateOne) ClearUpdatedAt() *RegCoinInfoUpdateOne {
	rciuo.mutation.ClearUpdatedAt()
	return rciuo
}

// SetDeletedAt sets the "deleted_at" field.
func (rciuo *RegCoinInfoUpdateOne) SetDeletedAt(u uint32) *RegCoinInfoUpdateOne {
	rciuo.mutation.ResetDeletedAt()
	rciuo.mutation.SetDeletedAt(u)
	return rciuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rciuo *RegCoinInfoUpdateOne) SetNillableDeletedAt(u *uint32) *RegCoinInfoUpdateOne {
	if u != nil {
		rciuo.SetDeletedAt(*u)
	}
	return rciuo
}

// AddDeletedAt adds u to the "deleted_at" field.
func (rciuo *RegCoinInfoUpdateOne) AddDeletedAt(u int32) *RegCoinInfoUpdateOne {
	rciuo.mutation.AddDeletedAt(u)
	return rciuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (rciuo *RegCoinInfoUpdateOne) ClearDeletedAt() *RegCoinInfoUpdateOne {
	rciuo.mutation.ClearDeletedAt()
	return rciuo
}

// Mutation returns the RegCoinInfoMutation object of the builder.
func (rciuo *RegCoinInfoUpdateOne) Mutation() *RegCoinInfoMutation {
	return rciuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rciuo *RegCoinInfoUpdateOne) Select(field string, fields ...string) *RegCoinInfoUpdateOne {
	rciuo.fields = append([]string{field}, fields...)
	return rciuo
}

// Save executes the query and returns the updated RegCoinInfo entity.
func (rciuo *RegCoinInfoUpdateOne) Save(ctx context.Context) (*RegCoinInfo, error) {
	var (
		err  error
		node *RegCoinInfo
	)
	rciuo.defaults()
	if len(rciuo.hooks) == 0 {
		node, err = rciuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RegCoinInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rciuo.mutation = mutation
			node, err = rciuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rciuo.hooks) - 1; i >= 0; i-- {
			if rciuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rciuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rciuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*RegCoinInfo)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RegCoinInfoMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (rciuo *RegCoinInfoUpdateOne) SaveX(ctx context.Context) *RegCoinInfo {
	node, err := rciuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rciuo *RegCoinInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := rciuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rciuo *RegCoinInfoUpdateOne) ExecX(ctx context.Context) {
	if err := rciuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rciuo *RegCoinInfoUpdateOne) defaults() {
	if _, ok := rciuo.mutation.UpdatedAt(); !ok && !rciuo.mutation.UpdatedAtCleared() {
		v := regcoininfo.UpdateDefaultUpdatedAt()
		rciuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rciuo *RegCoinInfoUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RegCoinInfoUpdateOne {
	rciuo.modifiers = append(rciuo.modifiers, modifiers...)
	return rciuo
}

func (rciuo *RegCoinInfoUpdateOne) sqlSave(ctx context.Context) (_node *RegCoinInfo, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   regcoininfo.Table,
			Columns: regcoininfo.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: regcoininfo.FieldID,
			},
		},
	}
	id, ok := rciuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RegCoinInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rciuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, regcoininfo.FieldID)
		for _, f := range fields {
			if !regcoininfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != regcoininfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rciuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rciuo.mutation.EntID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: regcoininfo.FieldEntID,
		})
	}
	if value, ok := rciuo.mutation.ChainType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: regcoininfo.FieldChainType,
		})
	}
	if value, ok := rciuo.mutation.AddedChainType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: regcoininfo.FieldChainType,
		})
	}
	if rciuo.mutation.ChainTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: regcoininfo.FieldChainType,
		})
	}
	if value, ok := rciuo.mutation.CoinType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: regcoininfo.FieldCoinType,
		})
	}
	if value, ok := rciuo.mutation.AddedCoinType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: regcoininfo.FieldCoinType,
		})
	}
	if rciuo.mutation.CoinTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: regcoininfo.FieldCoinType,
		})
	}
	if value, ok := rciuo.mutation.TempName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: regcoininfo.FieldTempName,
		})
	}
	if rciuo.mutation.TempNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: regcoininfo.FieldTempName,
		})
	}
	if value, ok := rciuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: regcoininfo.FieldName,
		})
	}
	if value, ok := rciuo.mutation.Env(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: regcoininfo.FieldEnv,
		})
	}
	if rciuo.mutation.EnvCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: regcoininfo.FieldEnv,
		})
	}
	if value, ok := rciuo.mutation.CreatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: regcoininfo.FieldCreatedAt,
		})
	}
	if value, ok := rciuo.mutation.AddedCreatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: regcoininfo.FieldCreatedAt,
		})
	}
	if rciuo.mutation.CreatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: regcoininfo.FieldCreatedAt,
		})
	}
	if value, ok := rciuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: regcoininfo.FieldUpdatedAt,
		})
	}
	if value, ok := rciuo.mutation.AddedUpdatedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: regcoininfo.FieldUpdatedAt,
		})
	}
	if rciuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: regcoininfo.FieldUpdatedAt,
		})
	}
	if value, ok := rciuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: regcoininfo.FieldDeletedAt,
		})
	}
	if value, ok := rciuo.mutation.AddedDeletedAt(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: regcoininfo.FieldDeletedAt,
		})
	}
	if rciuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Column: regcoininfo.FieldDeletedAt,
		})
	}
	_spec.Modifiers = rciuo.modifiers
	_node = &RegCoinInfo{config: rciuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rciuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{regcoininfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

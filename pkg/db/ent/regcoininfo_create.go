// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/NpoolPlatform/fox-proxy/pkg/db/ent/regcoininfo"
	"github.com/google/uuid"
)

// RegCoinInfoCreate is the builder for creating a RegCoinInfo entity.
type RegCoinInfoCreate struct {
	config
	mutation *RegCoinInfoMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEntID sets the "ent_id" field.
func (rcic *RegCoinInfoCreate) SetEntID(u uuid.UUID) *RegCoinInfoCreate {
	rcic.mutation.SetEntID(u)
	return rcic
}

// SetNillableEntID sets the "ent_id" field if the given value is not nil.
func (rcic *RegCoinInfoCreate) SetNillableEntID(u *uuid.UUID) *RegCoinInfoCreate {
	if u != nil {
		rcic.SetEntID(*u)
	}
	return rcic
}

// SetChainType sets the "chain_type" field.
func (rcic *RegCoinInfoCreate) SetChainType(i int32) *RegCoinInfoCreate {
	rcic.mutation.SetChainType(i)
	return rcic
}

// SetNillableChainType sets the "chain_type" field if the given value is not nil.
func (rcic *RegCoinInfoCreate) SetNillableChainType(i *int32) *RegCoinInfoCreate {
	if i != nil {
		rcic.SetChainType(*i)
	}
	return rcic
}

// SetCoinType sets the "coin_type" field.
func (rcic *RegCoinInfoCreate) SetCoinType(i int32) *RegCoinInfoCreate {
	rcic.mutation.SetCoinType(i)
	return rcic
}

// SetNillableCoinType sets the "coin_type" field if the given value is not nil.
func (rcic *RegCoinInfoCreate) SetNillableCoinType(i *int32) *RegCoinInfoCreate {
	if i != nil {
		rcic.SetCoinType(*i)
	}
	return rcic
}

// SetTempName sets the "temp_name" field.
func (rcic *RegCoinInfoCreate) SetTempName(s string) *RegCoinInfoCreate {
	rcic.mutation.SetTempName(s)
	return rcic
}

// SetNillableTempName sets the "temp_name" field if the given value is not nil.
func (rcic *RegCoinInfoCreate) SetNillableTempName(s *string) *RegCoinInfoCreate {
	if s != nil {
		rcic.SetTempName(*s)
	}
	return rcic
}

// SetName sets the "name" field.
func (rcic *RegCoinInfoCreate) SetName(s string) *RegCoinInfoCreate {
	rcic.mutation.SetName(s)
	return rcic
}

// SetEnv sets the "env" field.
func (rcic *RegCoinInfoCreate) SetEnv(s string) *RegCoinInfoCreate {
	rcic.mutation.SetEnv(s)
	return rcic
}

// SetNillableEnv sets the "env" field if the given value is not nil.
func (rcic *RegCoinInfoCreate) SetNillableEnv(s *string) *RegCoinInfoCreate {
	if s != nil {
		rcic.SetEnv(*s)
	}
	return rcic
}

// SetCreatedAt sets the "created_at" field.
func (rcic *RegCoinInfoCreate) SetCreatedAt(u uint32) *RegCoinInfoCreate {
	rcic.mutation.SetCreatedAt(u)
	return rcic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (rcic *RegCoinInfoCreate) SetNillableCreatedAt(u *uint32) *RegCoinInfoCreate {
	if u != nil {
		rcic.SetCreatedAt(*u)
	}
	return rcic
}

// SetUpdatedAt sets the "updated_at" field.
func (rcic *RegCoinInfoCreate) SetUpdatedAt(u uint32) *RegCoinInfoCreate {
	rcic.mutation.SetUpdatedAt(u)
	return rcic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (rcic *RegCoinInfoCreate) SetNillableUpdatedAt(u *uint32) *RegCoinInfoCreate {
	if u != nil {
		rcic.SetUpdatedAt(*u)
	}
	return rcic
}

// SetDeletedAt sets the "deleted_at" field.
func (rcic *RegCoinInfoCreate) SetDeletedAt(u uint32) *RegCoinInfoCreate {
	rcic.mutation.SetDeletedAt(u)
	return rcic
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (rcic *RegCoinInfoCreate) SetNillableDeletedAt(u *uint32) *RegCoinInfoCreate {
	if u != nil {
		rcic.SetDeletedAt(*u)
	}
	return rcic
}

// SetID sets the "id" field.
func (rcic *RegCoinInfoCreate) SetID(u uint32) *RegCoinInfoCreate {
	rcic.mutation.SetID(u)
	return rcic
}

// Mutation returns the RegCoinInfoMutation object of the builder.
func (rcic *RegCoinInfoCreate) Mutation() *RegCoinInfoMutation {
	return rcic.mutation
}

// Save creates the RegCoinInfo in the database.
func (rcic *RegCoinInfoCreate) Save(ctx context.Context) (*RegCoinInfo, error) {
	var (
		err  error
		node *RegCoinInfo
	)
	rcic.defaults()
	if len(rcic.hooks) == 0 {
		if err = rcic.check(); err != nil {
			return nil, err
		}
		node, err = rcic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RegCoinInfoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rcic.check(); err != nil {
				return nil, err
			}
			rcic.mutation = mutation
			if node, err = rcic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rcic.hooks) - 1; i >= 0; i-- {
			if rcic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rcic.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rcic.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*RegCoinInfo)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RegCoinInfoMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rcic *RegCoinInfoCreate) SaveX(ctx context.Context) *RegCoinInfo {
	v, err := rcic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcic *RegCoinInfoCreate) Exec(ctx context.Context) error {
	_, err := rcic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcic *RegCoinInfoCreate) ExecX(ctx context.Context) {
	if err := rcic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rcic *RegCoinInfoCreate) defaults() {
	if _, ok := rcic.mutation.EntID(); !ok {
		v := regcoininfo.DefaultEntID()
		rcic.mutation.SetEntID(v)
	}
	if _, ok := rcic.mutation.ChainType(); !ok {
		v := regcoininfo.DefaultChainType
		rcic.mutation.SetChainType(v)
	}
	if _, ok := rcic.mutation.CoinType(); !ok {
		v := regcoininfo.DefaultCoinType
		rcic.mutation.SetCoinType(v)
	}
	if _, ok := rcic.mutation.TempName(); !ok {
		v := regcoininfo.DefaultTempName
		rcic.mutation.SetTempName(v)
	}
	if _, ok := rcic.mutation.Env(); !ok {
		v := regcoininfo.DefaultEnv
		rcic.mutation.SetEnv(v)
	}
	if _, ok := rcic.mutation.CreatedAt(); !ok {
		v := regcoininfo.DefaultCreatedAt()
		rcic.mutation.SetCreatedAt(v)
	}
	if _, ok := rcic.mutation.UpdatedAt(); !ok {
		v := regcoininfo.DefaultUpdatedAt()
		rcic.mutation.SetUpdatedAt(v)
	}
	if _, ok := rcic.mutation.DeletedAt(); !ok {
		v := regcoininfo.DefaultDeletedAt()
		rcic.mutation.SetDeletedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rcic *RegCoinInfoCreate) check() error {
	if _, ok := rcic.mutation.EntID(); !ok {
		return &ValidationError{Name: "ent_id", err: errors.New(`ent: missing required field "RegCoinInfo.ent_id"`)}
	}
	if _, ok := rcic.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "RegCoinInfo.name"`)}
	}
	return nil
}

func (rcic *RegCoinInfoCreate) sqlSave(ctx context.Context) (*RegCoinInfo, error) {
	_node, _spec := rcic.createSpec()
	if err := sqlgraph.CreateNode(ctx, rcic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint32(id)
	}
	return _node, nil
}

func (rcic *RegCoinInfoCreate) createSpec() (*RegCoinInfo, *sqlgraph.CreateSpec) {
	var (
		_node = &RegCoinInfo{config: rcic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: regcoininfo.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint32,
				Column: regcoininfo.FieldID,
			},
		}
	)
	_spec.OnConflict = rcic.conflict
	if id, ok := rcic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rcic.mutation.EntID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: regcoininfo.FieldEntID,
		})
		_node.EntID = value
	}
	if value, ok := rcic.mutation.ChainType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: regcoininfo.FieldChainType,
		})
		_node.ChainType = value
	}
	if value, ok := rcic.mutation.CoinType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: regcoininfo.FieldCoinType,
		})
		_node.CoinType = value
	}
	if value, ok := rcic.mutation.TempName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: regcoininfo.FieldTempName,
		})
		_node.TempName = value
	}
	if value, ok := rcic.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: regcoininfo.FieldName,
		})
		_node.Name = value
	}
	if value, ok := rcic.mutation.Env(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: regcoininfo.FieldEnv,
		})
		_node.Env = value
	}
	if value, ok := rcic.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: regcoininfo.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := rcic.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: regcoininfo.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := rcic.mutation.DeletedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: regcoininfo.FieldDeletedAt,
		})
		_node.DeletedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RegCoinInfo.Create().
//		SetEntID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RegCoinInfoUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (rcic *RegCoinInfoCreate) OnConflict(opts ...sql.ConflictOption) *RegCoinInfoUpsertOne {
	rcic.conflict = opts
	return &RegCoinInfoUpsertOne{
		create: rcic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RegCoinInfo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcic *RegCoinInfoCreate) OnConflictColumns(columns ...string) *RegCoinInfoUpsertOne {
	rcic.conflict = append(rcic.conflict, sql.ConflictColumns(columns...))
	return &RegCoinInfoUpsertOne{
		create: rcic,
	}
}

type (
	// RegCoinInfoUpsertOne is the builder for "upsert"-ing
	//  one RegCoinInfo node.
	RegCoinInfoUpsertOne struct {
		create *RegCoinInfoCreate
	}

	// RegCoinInfoUpsert is the "OnConflict" setter.
	RegCoinInfoUpsert struct {
		*sql.UpdateSet
	}
)

// SetEntID sets the "ent_id" field.
func (u *RegCoinInfoUpsert) SetEntID(v uuid.UUID) *RegCoinInfoUpsert {
	u.Set(regcoininfo.FieldEntID, v)
	return u
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *RegCoinInfoUpsert) UpdateEntID() *RegCoinInfoUpsert {
	u.SetExcluded(regcoininfo.FieldEntID)
	return u
}

// SetChainType sets the "chain_type" field.
func (u *RegCoinInfoUpsert) SetChainType(v int32) *RegCoinInfoUpsert {
	u.Set(regcoininfo.FieldChainType, v)
	return u
}

// UpdateChainType sets the "chain_type" field to the value that was provided on create.
func (u *RegCoinInfoUpsert) UpdateChainType() *RegCoinInfoUpsert {
	u.SetExcluded(regcoininfo.FieldChainType)
	return u
}

// AddChainType adds v to the "chain_type" field.
func (u *RegCoinInfoUpsert) AddChainType(v int32) *RegCoinInfoUpsert {
	u.Add(regcoininfo.FieldChainType, v)
	return u
}

// ClearChainType clears the value of the "chain_type" field.
func (u *RegCoinInfoUpsert) ClearChainType() *RegCoinInfoUpsert {
	u.SetNull(regcoininfo.FieldChainType)
	return u
}

// SetCoinType sets the "coin_type" field.
func (u *RegCoinInfoUpsert) SetCoinType(v int32) *RegCoinInfoUpsert {
	u.Set(regcoininfo.FieldCoinType, v)
	return u
}

// UpdateCoinType sets the "coin_type" field to the value that was provided on create.
func (u *RegCoinInfoUpsert) UpdateCoinType() *RegCoinInfoUpsert {
	u.SetExcluded(regcoininfo.FieldCoinType)
	return u
}

// AddCoinType adds v to the "coin_type" field.
func (u *RegCoinInfoUpsert) AddCoinType(v int32) *RegCoinInfoUpsert {
	u.Add(regcoininfo.FieldCoinType, v)
	return u
}

// ClearCoinType clears the value of the "coin_type" field.
func (u *RegCoinInfoUpsert) ClearCoinType() *RegCoinInfoUpsert {
	u.SetNull(regcoininfo.FieldCoinType)
	return u
}

// SetTempName sets the "temp_name" field.
func (u *RegCoinInfoUpsert) SetTempName(v string) *RegCoinInfoUpsert {
	u.Set(regcoininfo.FieldTempName, v)
	return u
}

// UpdateTempName sets the "temp_name" field to the value that was provided on create.
func (u *RegCoinInfoUpsert) UpdateTempName() *RegCoinInfoUpsert {
	u.SetExcluded(regcoininfo.FieldTempName)
	return u
}

// ClearTempName clears the value of the "temp_name" field.
func (u *RegCoinInfoUpsert) ClearTempName() *RegCoinInfoUpsert {
	u.SetNull(regcoininfo.FieldTempName)
	return u
}

// SetName sets the "name" field.
func (u *RegCoinInfoUpsert) SetName(v string) *RegCoinInfoUpsert {
	u.Set(regcoininfo.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RegCoinInfoUpsert) UpdateName() *RegCoinInfoUpsert {
	u.SetExcluded(regcoininfo.FieldName)
	return u
}

// SetEnv sets the "env" field.
func (u *RegCoinInfoUpsert) SetEnv(v string) *RegCoinInfoUpsert {
	u.Set(regcoininfo.FieldEnv, v)
	return u
}

// UpdateEnv sets the "env" field to the value that was provided on create.
func (u *RegCoinInfoUpsert) UpdateEnv() *RegCoinInfoUpsert {
	u.SetExcluded(regcoininfo.FieldEnv)
	return u
}

// ClearEnv clears the value of the "env" field.
func (u *RegCoinInfoUpsert) ClearEnv() *RegCoinInfoUpsert {
	u.SetNull(regcoininfo.FieldEnv)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *RegCoinInfoUpsert) SetCreatedAt(v uint32) *RegCoinInfoUpsert {
	u.Set(regcoininfo.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RegCoinInfoUpsert) UpdateCreatedAt() *RegCoinInfoUpsert {
	u.SetExcluded(regcoininfo.FieldCreatedAt)
	return u
}

// AddCreatedAt adds v to the "created_at" field.
func (u *RegCoinInfoUpsert) AddCreatedAt(v uint32) *RegCoinInfoUpsert {
	u.Add(regcoininfo.FieldCreatedAt, v)
	return u
}

// ClearCreatedAt clears the value of the "created_at" field.
func (u *RegCoinInfoUpsert) ClearCreatedAt() *RegCoinInfoUpsert {
	u.SetNull(regcoininfo.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RegCoinInfoUpsert) SetUpdatedAt(v uint32) *RegCoinInfoUpsert {
	u.Set(regcoininfo.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RegCoinInfoUpsert) UpdateUpdatedAt() *RegCoinInfoUpsert {
	u.SetExcluded(regcoininfo.FieldUpdatedAt)
	return u
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *RegCoinInfoUpsert) AddUpdatedAt(v uint32) *RegCoinInfoUpsert {
	u.Add(regcoininfo.FieldUpdatedAt, v)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *RegCoinInfoUpsert) ClearUpdatedAt() *RegCoinInfoUpsert {
	u.SetNull(regcoininfo.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RegCoinInfoUpsert) SetDeletedAt(v uint32) *RegCoinInfoUpsert {
	u.Set(regcoininfo.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RegCoinInfoUpsert) UpdateDeletedAt() *RegCoinInfoUpsert {
	u.SetExcluded(regcoininfo.FieldDeletedAt)
	return u
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *RegCoinInfoUpsert) AddDeletedAt(v uint32) *RegCoinInfoUpsert {
	u.Add(regcoininfo.FieldDeletedAt, v)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *RegCoinInfoUpsert) ClearDeletedAt() *RegCoinInfoUpsert {
	u.SetNull(regcoininfo.FieldDeletedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.RegCoinInfo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(regcoininfo.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RegCoinInfoUpsertOne) UpdateNewValues() *RegCoinInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(regcoininfo.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RegCoinInfo.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RegCoinInfoUpsertOne) Ignore() *RegCoinInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RegCoinInfoUpsertOne) DoNothing() *RegCoinInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RegCoinInfoCreate.OnConflict
// documentation for more info.
func (u *RegCoinInfoUpsertOne) Update(set func(*RegCoinInfoUpsert)) *RegCoinInfoUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RegCoinInfoUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *RegCoinInfoUpsertOne) SetEntID(v uuid.UUID) *RegCoinInfoUpsertOne {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *RegCoinInfoUpsertOne) UpdateEntID() *RegCoinInfoUpsertOne {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.UpdateEntID()
	})
}

// SetChainType sets the "chain_type" field.
func (u *RegCoinInfoUpsertOne) SetChainType(v int32) *RegCoinInfoUpsertOne {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.SetChainType(v)
	})
}

// AddChainType adds v to the "chain_type" field.
func (u *RegCoinInfoUpsertOne) AddChainType(v int32) *RegCoinInfoUpsertOne {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.AddChainType(v)
	})
}

// UpdateChainType sets the "chain_type" field to the value that was provided on create.
func (u *RegCoinInfoUpsertOne) UpdateChainType() *RegCoinInfoUpsertOne {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.UpdateChainType()
	})
}

// ClearChainType clears the value of the "chain_type" field.
func (u *RegCoinInfoUpsertOne) ClearChainType() *RegCoinInfoUpsertOne {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.ClearChainType()
	})
}

// SetCoinType sets the "coin_type" field.
func (u *RegCoinInfoUpsertOne) SetCoinType(v int32) *RegCoinInfoUpsertOne {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.SetCoinType(v)
	})
}

// AddCoinType adds v to the "coin_type" field.
func (u *RegCoinInfoUpsertOne) AddCoinType(v int32) *RegCoinInfoUpsertOne {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.AddCoinType(v)
	})
}

// UpdateCoinType sets the "coin_type" field to the value that was provided on create.
func (u *RegCoinInfoUpsertOne) UpdateCoinType() *RegCoinInfoUpsertOne {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.UpdateCoinType()
	})
}

// ClearCoinType clears the value of the "coin_type" field.
func (u *RegCoinInfoUpsertOne) ClearCoinType() *RegCoinInfoUpsertOne {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.ClearCoinType()
	})
}

// SetTempName sets the "temp_name" field.
func (u *RegCoinInfoUpsertOne) SetTempName(v string) *RegCoinInfoUpsertOne {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.SetTempName(v)
	})
}

// UpdateTempName sets the "temp_name" field to the value that was provided on create.
func (u *RegCoinInfoUpsertOne) UpdateTempName() *RegCoinInfoUpsertOne {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.UpdateTempName()
	})
}

// ClearTempName clears the value of the "temp_name" field.
func (u *RegCoinInfoUpsertOne) ClearTempName() *RegCoinInfoUpsertOne {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.ClearTempName()
	})
}

// SetName sets the "name" field.
func (u *RegCoinInfoUpsertOne) SetName(v string) *RegCoinInfoUpsertOne {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RegCoinInfoUpsertOne) UpdateName() *RegCoinInfoUpsertOne {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.UpdateName()
	})
}

// SetEnv sets the "env" field.
func (u *RegCoinInfoUpsertOne) SetEnv(v string) *RegCoinInfoUpsertOne {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.SetEnv(v)
	})
}

// UpdateEnv sets the "env" field to the value that was provided on create.
func (u *RegCoinInfoUpsertOne) UpdateEnv() *RegCoinInfoUpsertOne {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.UpdateEnv()
	})
}

// ClearEnv clears the value of the "env" field.
func (u *RegCoinInfoUpsertOne) ClearEnv() *RegCoinInfoUpsertOne {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.ClearEnv()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *RegCoinInfoUpsertOne) SetCreatedAt(v uint32) *RegCoinInfoUpsertOne {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *RegCoinInfoUpsertOne) AddCreatedAt(v uint32) *RegCoinInfoUpsertOne {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RegCoinInfoUpsertOne) UpdateCreatedAt() *RegCoinInfoUpsertOne {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.UpdateCreatedAt()
	})
}

// ClearCreatedAt clears the value of the "created_at" field.
func (u *RegCoinInfoUpsertOne) ClearCreatedAt() *RegCoinInfoUpsertOne {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.ClearCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RegCoinInfoUpsertOne) SetUpdatedAt(v uint32) *RegCoinInfoUpsertOne {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *RegCoinInfoUpsertOne) AddUpdatedAt(v uint32) *RegCoinInfoUpsertOne {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RegCoinInfoUpsertOne) UpdateUpdatedAt() *RegCoinInfoUpsertOne {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *RegCoinInfoUpsertOne) ClearUpdatedAt() *RegCoinInfoUpsertOne {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RegCoinInfoUpsertOne) SetDeletedAt(v uint32) *RegCoinInfoUpsertOne {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *RegCoinInfoUpsertOne) AddDeletedAt(v uint32) *RegCoinInfoUpsertOne {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RegCoinInfoUpsertOne) UpdateDeletedAt() *RegCoinInfoUpsertOne {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *RegCoinInfoUpsertOne) ClearDeletedAt() *RegCoinInfoUpsertOne {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *RegCoinInfoUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RegCoinInfoCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RegCoinInfoUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RegCoinInfoUpsertOne) ID(ctx context.Context) (id uint32, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RegCoinInfoUpsertOne) IDX(ctx context.Context) uint32 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RegCoinInfoCreateBulk is the builder for creating many RegCoinInfo entities in bulk.
type RegCoinInfoCreateBulk struct {
	config
	builders []*RegCoinInfoCreate
	conflict []sql.ConflictOption
}

// Save creates the RegCoinInfo entities in the database.
func (rcicb *RegCoinInfoCreateBulk) Save(ctx context.Context) ([]*RegCoinInfo, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcicb.builders))
	nodes := make([]*RegCoinInfo, len(rcicb.builders))
	mutators := make([]Mutator, len(rcicb.builders))
	for i := range rcicb.builders {
		func(i int, root context.Context) {
			builder := rcicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RegCoinInfoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint32(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcicb *RegCoinInfoCreateBulk) SaveX(ctx context.Context) []*RegCoinInfo {
	v, err := rcicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcicb *RegCoinInfoCreateBulk) Exec(ctx context.Context) error {
	_, err := rcicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcicb *RegCoinInfoCreateBulk) ExecX(ctx context.Context) {
	if err := rcicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RegCoinInfo.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RegCoinInfoUpsert) {
//			SetEntID(v+v).
//		}).
//		Exec(ctx)
func (rcicb *RegCoinInfoCreateBulk) OnConflict(opts ...sql.ConflictOption) *RegCoinInfoUpsertBulk {
	rcicb.conflict = opts
	return &RegCoinInfoUpsertBulk{
		create: rcicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RegCoinInfo.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcicb *RegCoinInfoCreateBulk) OnConflictColumns(columns ...string) *RegCoinInfoUpsertBulk {
	rcicb.conflict = append(rcicb.conflict, sql.ConflictColumns(columns...))
	return &RegCoinInfoUpsertBulk{
		create: rcicb,
	}
}

// RegCoinInfoUpsertBulk is the builder for "upsert"-ing
// a bulk of RegCoinInfo nodes.
type RegCoinInfoUpsertBulk struct {
	create *RegCoinInfoCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RegCoinInfo.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(regcoininfo.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *RegCoinInfoUpsertBulk) UpdateNewValues() *RegCoinInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(regcoininfo.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RegCoinInfo.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RegCoinInfoUpsertBulk) Ignore() *RegCoinInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RegCoinInfoUpsertBulk) DoNothing() *RegCoinInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RegCoinInfoCreateBulk.OnConflict
// documentation for more info.
func (u *RegCoinInfoUpsertBulk) Update(set func(*RegCoinInfoUpsert)) *RegCoinInfoUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RegCoinInfoUpsert{UpdateSet: update})
	}))
	return u
}

// SetEntID sets the "ent_id" field.
func (u *RegCoinInfoUpsertBulk) SetEntID(v uuid.UUID) *RegCoinInfoUpsertBulk {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.SetEntID(v)
	})
}

// UpdateEntID sets the "ent_id" field to the value that was provided on create.
func (u *RegCoinInfoUpsertBulk) UpdateEntID() *RegCoinInfoUpsertBulk {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.UpdateEntID()
	})
}

// SetChainType sets the "chain_type" field.
func (u *RegCoinInfoUpsertBulk) SetChainType(v int32) *RegCoinInfoUpsertBulk {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.SetChainType(v)
	})
}

// AddChainType adds v to the "chain_type" field.
func (u *RegCoinInfoUpsertBulk) AddChainType(v int32) *RegCoinInfoUpsertBulk {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.AddChainType(v)
	})
}

// UpdateChainType sets the "chain_type" field to the value that was provided on create.
func (u *RegCoinInfoUpsertBulk) UpdateChainType() *RegCoinInfoUpsertBulk {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.UpdateChainType()
	})
}

// ClearChainType clears the value of the "chain_type" field.
func (u *RegCoinInfoUpsertBulk) ClearChainType() *RegCoinInfoUpsertBulk {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.ClearChainType()
	})
}

// SetCoinType sets the "coin_type" field.
func (u *RegCoinInfoUpsertBulk) SetCoinType(v int32) *RegCoinInfoUpsertBulk {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.SetCoinType(v)
	})
}

// AddCoinType adds v to the "coin_type" field.
func (u *RegCoinInfoUpsertBulk) AddCoinType(v int32) *RegCoinInfoUpsertBulk {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.AddCoinType(v)
	})
}

// UpdateCoinType sets the "coin_type" field to the value that was provided on create.
func (u *RegCoinInfoUpsertBulk) UpdateCoinType() *RegCoinInfoUpsertBulk {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.UpdateCoinType()
	})
}

// ClearCoinType clears the value of the "coin_type" field.
func (u *RegCoinInfoUpsertBulk) ClearCoinType() *RegCoinInfoUpsertBulk {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.ClearCoinType()
	})
}

// SetTempName sets the "temp_name" field.
func (u *RegCoinInfoUpsertBulk) SetTempName(v string) *RegCoinInfoUpsertBulk {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.SetTempName(v)
	})
}

// UpdateTempName sets the "temp_name" field to the value that was provided on create.
func (u *RegCoinInfoUpsertBulk) UpdateTempName() *RegCoinInfoUpsertBulk {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.UpdateTempName()
	})
}

// ClearTempName clears the value of the "temp_name" field.
func (u *RegCoinInfoUpsertBulk) ClearTempName() *RegCoinInfoUpsertBulk {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.ClearTempName()
	})
}

// SetName sets the "name" field.
func (u *RegCoinInfoUpsertBulk) SetName(v string) *RegCoinInfoUpsertBulk {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *RegCoinInfoUpsertBulk) UpdateName() *RegCoinInfoUpsertBulk {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.UpdateName()
	})
}

// SetEnv sets the "env" field.
func (u *RegCoinInfoUpsertBulk) SetEnv(v string) *RegCoinInfoUpsertBulk {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.SetEnv(v)
	})
}

// UpdateEnv sets the "env" field to the value that was provided on create.
func (u *RegCoinInfoUpsertBulk) UpdateEnv() *RegCoinInfoUpsertBulk {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.UpdateEnv()
	})
}

// ClearEnv clears the value of the "env" field.
func (u *RegCoinInfoUpsertBulk) ClearEnv() *RegCoinInfoUpsertBulk {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.ClearEnv()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *RegCoinInfoUpsertBulk) SetCreatedAt(v uint32) *RegCoinInfoUpsertBulk {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.SetCreatedAt(v)
	})
}

// AddCreatedAt adds v to the "created_at" field.
func (u *RegCoinInfoUpsertBulk) AddCreatedAt(v uint32) *RegCoinInfoUpsertBulk {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.AddCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *RegCoinInfoUpsertBulk) UpdateCreatedAt() *RegCoinInfoUpsertBulk {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.UpdateCreatedAt()
	})
}

// ClearCreatedAt clears the value of the "created_at" field.
func (u *RegCoinInfoUpsertBulk) ClearCreatedAt() *RegCoinInfoUpsertBulk {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.ClearCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *RegCoinInfoUpsertBulk) SetUpdatedAt(v uint32) *RegCoinInfoUpsertBulk {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.SetUpdatedAt(v)
	})
}

// AddUpdatedAt adds v to the "updated_at" field.
func (u *RegCoinInfoUpsertBulk) AddUpdatedAt(v uint32) *RegCoinInfoUpsertBulk {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.AddUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *RegCoinInfoUpsertBulk) UpdateUpdatedAt() *RegCoinInfoUpsertBulk {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *RegCoinInfoUpsertBulk) ClearUpdatedAt() *RegCoinInfoUpsertBulk {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *RegCoinInfoUpsertBulk) SetDeletedAt(v uint32) *RegCoinInfoUpsertBulk {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.SetDeletedAt(v)
	})
}

// AddDeletedAt adds v to the "deleted_at" field.
func (u *RegCoinInfoUpsertBulk) AddDeletedAt(v uint32) *RegCoinInfoUpsertBulk {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.AddDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *RegCoinInfoUpsertBulk) UpdateDeletedAt() *RegCoinInfoUpsertBulk {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *RegCoinInfoUpsertBulk) ClearDeletedAt() *RegCoinInfoUpsertBulk {
	return u.Update(func(s *RegCoinInfoUpsert) {
		s.ClearDeletedAt()
	})
}

// Exec executes the query.
func (u *RegCoinInfoUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RegCoinInfoCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RegCoinInfoCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RegCoinInfoUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

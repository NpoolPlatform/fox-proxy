// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/NpoolPlatform/fox-proxy/pkg/db/ent/regcoininfo"
	"github.com/google/uuid"
)

// RegCoinInfo is the model entity for the RegCoinInfo schema.
type RegCoinInfo struct {
	config `json:"-"`
	// ID of the ent.
	ID uint32 `json:"id,omitempty"`
	// EntID holds the value of the "ent_id" field.
	EntID uuid.UUID `json:"ent_id,omitempty"`
	// ChainType holds the value of the "chain_type" field.
	ChainType int32 `json:"chain_type,omitempty"`
	// CoinType holds the value of the "coin_type" field.
	CoinType int32 `json:"coin_type,omitempty"`
	// TempName holds the value of the "temp_name" field.
	TempName string `json:"temp_name,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Env holds the value of the "env" field.
	Env string `json:"env,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt uint32 `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt uint32 `json:"updated_at,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt uint32 `json:"deleted_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RegCoinInfo) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case regcoininfo.FieldID, regcoininfo.FieldChainType, regcoininfo.FieldCoinType, regcoininfo.FieldCreatedAt, regcoininfo.FieldUpdatedAt, regcoininfo.FieldDeletedAt:
			values[i] = new(sql.NullInt64)
		case regcoininfo.FieldTempName, regcoininfo.FieldName, regcoininfo.FieldEnv:
			values[i] = new(sql.NullString)
		case regcoininfo.FieldEntID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type RegCoinInfo", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RegCoinInfo fields.
func (rci *RegCoinInfo) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case regcoininfo.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rci.ID = uint32(value.Int64)
		case regcoininfo.FieldEntID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field ent_id", values[i])
			} else if value != nil {
				rci.EntID = *value
			}
		case regcoininfo.FieldChainType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field chain_type", values[i])
			} else if value.Valid {
				rci.ChainType = int32(value.Int64)
			}
		case regcoininfo.FieldCoinType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field coin_type", values[i])
			} else if value.Valid {
				rci.CoinType = int32(value.Int64)
			}
		case regcoininfo.FieldTempName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field temp_name", values[i])
			} else if value.Valid {
				rci.TempName = value.String
			}
		case regcoininfo.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				rci.Name = value.String
			}
		case regcoininfo.FieldEnv:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field env", values[i])
			} else if value.Valid {
				rci.Env = value.String
			}
		case regcoininfo.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				rci.CreatedAt = uint32(value.Int64)
			}
		case regcoininfo.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				rci.UpdatedAt = uint32(value.Int64)
			}
		case regcoininfo.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				rci.DeletedAt = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this RegCoinInfo.
// Note that you need to call RegCoinInfo.Unwrap() before calling this method if this RegCoinInfo
// was returned from a transaction, and the transaction was committed or rolled back.
func (rci *RegCoinInfo) Update() *RegCoinInfoUpdateOne {
	return (&RegCoinInfoClient{config: rci.config}).UpdateOne(rci)
}

// Unwrap unwraps the RegCoinInfo entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rci *RegCoinInfo) Unwrap() *RegCoinInfo {
	_tx, ok := rci.config.driver.(*txDriver)
	if !ok {
		panic("ent: RegCoinInfo is not a transactional entity")
	}
	rci.config.driver = _tx.drv
	return rci
}

// String implements the fmt.Stringer.
func (rci *RegCoinInfo) String() string {
	var builder strings.Builder
	builder.WriteString("RegCoinInfo(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rci.ID))
	builder.WriteString("ent_id=")
	builder.WriteString(fmt.Sprintf("%v", rci.EntID))
	builder.WriteString(", ")
	builder.WriteString("chain_type=")
	builder.WriteString(fmt.Sprintf("%v", rci.ChainType))
	builder.WriteString(", ")
	builder.WriteString("coin_type=")
	builder.WriteString(fmt.Sprintf("%v", rci.CoinType))
	builder.WriteString(", ")
	builder.WriteString("temp_name=")
	builder.WriteString(rci.TempName)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(rci.Name)
	builder.WriteString(", ")
	builder.WriteString("env=")
	builder.WriteString(rci.Env)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", rci.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", rci.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(fmt.Sprintf("%v", rci.DeletedAt))
	builder.WriteByte(')')
	return builder.String()
}

// RegCoinInfos is a parsable slice of RegCoinInfo.
type RegCoinInfos []*RegCoinInfo

func (rci RegCoinInfos) config(cfg config) {
	for _i := range rci {
		rci[_i].config = cfg
	}
}
